import {createHash} from 'crypto';
import axios, {AxiosRequestConfig} from 'axios';
import {gc_url} from '../../constants';
import {URL} from 'url';

const NEW_TOKEN = {
  permissions: '*:*:read',
  name: 'gluco-check',
  notes: `Auto-generated by Gluco Check (${gc_url})`,
};

const ENDPOINT = {
  roles: '/api/v2/authorization/roles',
  subjects: '/api/v2/authorization/subjects',
};

type Role = {
  permissions: string[];
  name: string;
  notes: string;
};

type Subject = {
  _id?: string;
  roles: string[];
  name: string;
  notes: string;
  accessToken?: string;
};

/**
 * Uses an API secret to create a new token (and role) in Nightscout.
 * Returns null on failure
 */
export async function createNewToken(apiSecret: string, url: string) {
  // Nightscout expects the apiSecret to be SHA1-hashed
  const hash = sha1(apiSecret);

  try {
    // Try creating a role (or reuse existing)
    const success = await createNightscoutRole(hash, url);
    if (!success) return undefined;

    // Try adding a subject to the role (or reuse existing)
    const token = await createNightscoutSubject(hash, url);
    return token;

    // In case of error, return undefined
  } catch {
    return undefined;
  }
}

/**
 * Checks Nightscout for a suitable role, and creates it if none is found.
 */
async function createNightscoutRole(hash: string, url: string) {
  // Specs for the (new) role
  const role: Role = {
    notes: NEW_TOKEN.notes,
    name: NEW_TOKEN.name,
    permissions: [NEW_TOKEN.permissions],
  };

  // Basic Axios request to /authorization/roles
  const request: AxiosRequestConfig = {
    data: role,
    headers: {'api-secret': hash},
    url: String(new URL(ENDPOINT.roles, url)),
  };

  // Find existing roles
  const currentRoles = await axios.request<Role[]>(request);

  // Does a role with our specs exist?
  const exists = currentRoles.data.find(_role => {
    return _role.name === role.name && _role.permissions.includes(NEW_TOKEN.permissions);
  });
  if (exists) return true;

  // Add our role
  const res = await axios.request({...request, method: 'POST'});
  return res.status === 200;
}

/**
 * Checks Nightscout for our Subject (=token).
 * Creates a new subject if not found.
 */
async function createNightscoutSubject(hash: string, url: string) {
  // Specs for our Subject
  const subject: Subject = {
    notes: NEW_TOKEN.notes,
    name: NEW_TOKEN.name,
    roles: [NEW_TOKEN.name],
  };

  // Basic Axios request to /authorization/subjects
  const reqConfig: AxiosRequestConfig = {
    data: subject,
    headers: {'api-secret': hash},
    url: String(new URL(ENDPOINT.subjects, url)),
  };

  // Find existing subjects
  const currentSubjects = await axios.request<Subject[]>(reqConfig);

  // Does a subject with our specs exist?
  const exists = currentSubjects.data.find(_subject => {
    return _subject.name === subject.name && _subject.roles.includes(NEW_TOKEN.name);
  });
  if (exists) return exists.accessToken!;

  // Create our new subject
  const created = await axios.request<Subject[]>({...reqConfig, method: 'POST'});
  const subjectId = created.data[0]?._id;

  // Get the accessToken of the newly created subject
  const subjects = await axios.request<Subject[]>(reqConfig);
  const token = subjects.data.find(s => s._id === subjectId)?.accessToken;
  return token;
}

function sha1(input: string) {
  const hash = createHash('sha1');
  hash.update(input);
  return hash.digest('hex');
}
